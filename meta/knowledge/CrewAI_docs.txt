# CrewAI Framework Documentation

## Core Concepts

CrewAI is a framework designed to orchestrate multiple AI agents to autonomously accomplish complex real-world tasks through cooperation. The framework utilizes large language models (LLMs) to create collaborative agents that interact with each other and the environment to complete multi-step tasks.

### Key Components

1. **Agents**: Specialized entities that represent different roles with specific skills, goals, and backstories.
2. **Tasks**: Well-defined objectives assigned to agents, with descriptions and expected outputs.
3. **Crews**: Collections of agents working together under a defined process.
4. **Tools**: Capabilities that agents can use to interact with external systems and data.
5. **Knowledge**: External information sources that agents can access during task execution.

## Knowledge System

Knowledge in CrewAI allows agents to access and utilize external information sources during their tasks. It provides a reference library for agents to consult while working, enhancing their capabilities with domain-specific information, supporting decisions with real-world data, maintaining context across conversations, and grounding responses in factual information.

### Supported Knowledge Sources

- **Text Sources**: Raw strings, text files (.txt), PDF documents
- **Structured Data**: CSV files, Excel spreadsheets, JSON documents

### Knowledge Configuration

```python
from crewai import Agent, Task, Crew, Process, LLM
from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource

# Create a knowledge source
content = "Users name is John. He is 30 years old and lives in San Francisco."
string_source = StringKnowledgeSource(content=content)

# Create an agent with the knowledge store
agent = Agent(
    role="About User",
    goal="You know everything about the user.",
    backstory="""You are a master at understanding people and their preferences.""",
    verbose=True,
    allow_delegation=False,
    llm=LLM(model="gpt-4o-mini", temperature=0),
)

crew = Crew(
    agents=[agent],
    tasks=[task],
    verbose=True,
    process=Process.sequential,
    knowledge_sources=[string_source], # Enable knowledge by adding the sources here
)
```

### File-Based Knowledge Example

```python
from crewai.knowledge.source.text_file_knowledge_source import TextFileKnowledgeSource

# Create a text file knowledge source
text_source = TextFileKnowledgeSource(
    file_paths=["document.txt", "another.txt"]
)

# Create crew with text file source
crew = Crew(
    agents=[agent],
    tasks=[task],
    knowledge_sources=[text_source]
)
```

## Agents

Agents are the core entities in CrewAI that perform tasks. Each agent has:

- **Role**: The agent's job title or function
- **Goal**: What the agent aims to achieve
- **Backstory**: Background information that shapes the agent's perspective
- **LLM**: The language model powering the agent
- **Tools**: Optional capabilities the agent can use
- **Knowledge**: Optional external information the agent can access

```python
from crewai import Agent

research_analyst = Agent(
    role="Research Analyst",
    goal="Find and analyze the latest market trends",
    backstory="You are an experienced analyst with expertise in market research",
    llm="gpt-4o-mini",
    tools=[search_tool, data_analysis_tool],
    knowledge_sources=[market_reports]
)
```

## Tasks

Tasks are specific objectives assigned to agents. Each task includes:

- **Description**: What needs to be done, can include placeholders like `{request}`
- **Expected Output**: The format or content expected as a result
- **Agent**: The agent assigned to the task

```python
from crewai import Task

market_research_task = Task(
    description="Research and analyze {market_segment} trends in {time_period}",
    expected_output="A comprehensive report with data-backed insights",
    agent=research_analyst
)
```

## Crews

Crews are collections of agents working together to accomplish tasks. A crew configuration includes:

- **Agents**: The list of agents in the crew
- **Tasks**: The tasks to be performed
- **Process**: The workflow (sequential or hierarchical)
- **Verbose**: Whether to display detailed output
- **Knowledge Sources**: Shared information accessible to all agents

```python
from crewai import Crew, Process

market_research_crew = Crew(
    agents=[research_analyst, data_scientist, report_writer],
    tasks=[data_collection_task, analysis_task, report_task],
    process=Process.sequential,
    verbose=True,
    knowledge_sources=[industry_reports, company_data]
)

# Execute the crew
result = market_research_crew.kickoff(inputs={"market_segment": "AI", "time_period": "2025-Q1"})
```

## Tools

Tools give agents the ability to interact with external systems and data sources. CrewAI supports various tool types:

- **Built-in tools**: File operations, web browsing, etc.
- **Custom tools**: User-defined functions that agents can call
- **Tool providers**: Integration with libraries like LangChain

```python
from crewai import Agent
from crewai.tools import tool

@tool
def search_web(query: str) -> str:
    """Search the web for information about a topic"""
    # Implementation here
    return "Search results for: " + query

agent = Agent(
    role="Researcher",
    goal="Find accurate information",
    tools=[search_web]
)
```

## Best Practices

1. **Define clear agent roles and goals**: Make each agent's purpose specific and distinct
2. **Create detailed task descriptions**: Be explicit about what you want accomplished
3. **Use the right process**: Choose sequential for step-by-step workflows or hierarchical for complex reasoning
4. **Provide relevant knowledge**: Give agents the information they need to succeed
5. **Enable appropriate tools**: Equip agents with capabilities that match their roles
6. **Handle inputs properly**: Use placeholders in task descriptions to inject dynamic data
7. **Test incrementally**: Start simple and add complexity gradually

## Example: Simple Crew with Knowledge

```python
import os
from crewai import Agent, Task, Crew, Process
from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource

# Disable telemetry if needed
os.environ["CREWAI_TELEMETRY"] = "False"

# Create knowledge source
product_info = StringKnowledgeSource(
    content="The XPS 13 features a 13.4-inch display, Intel Core i7, 16GB RAM, and 12-hour battery."
)

# Create agent
product_specialist = Agent(
    role="Product Specialist",
    goal="Provide accurate product information",
    backstory="You are an expert on computer specifications",
    llm="gpt-4o-mini"
)

# Create task
answer_task = Task(
    description="Answer this question about our product: {question}",
    expected_output="A detailed, accurate answer",
    agent=product_specialist
)

# Create crew
support_crew = Crew(
    agents=[product_specialist],
    tasks=[answer_task],
    process=Process.sequential,
    verbose=True,
    knowledge_sources=[product_info]
)

# Execute with a specific question
result = support_crew.kickoff(inputs={"question": "What is the RAM in the XPS 13?"})
print(result)
```

This documentation provides a comprehensive overview of the CrewAI framework, focusing on its knowledge system and core components. Use it to design effective agent-based solutions for complex tasks.
